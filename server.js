 /******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/

'use strict';

var fs = require('fs');
var express = require('express');
var app = express();

// Retrieve
var MongoClient = require('mongodb').MongoClient;

// Connect to the db
MongoClient.connect(process.env.MONGODB_URL, function(err, db) {
  if(!err) {
    console.log("We are connected to the database");
    
    var urlCollection = db.collection('urlMapping');

    if (!process.env.DISABLE_XORIGIN) {
      app.use(function(req, res, next) {
        var allowedOrigins = ['https://narrow-plane.gomix.me', 'https://www.freecodecamp.com'];
        var origin = req.headers.origin || '*';
        if(!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1){
             console.log(origin);
             res.setHeader('Access-Control-Allow-Origin', origin);
             res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
        }
        next();
      });
    }

    app.use('/public', express.static(process.cwd() + '/public'));

    app.route('/_api/package.json')
      .get(function(req, res, next) {
        console.log('requested');
        fs.readFile(__dirname + '/package.json', function(err, data) {
          if(err) return next(err);
          res.type('txt').send(data.toString());
        });
      });

    // app.route('/new/:newURL')
    app.route('/new/*')
          .get(function(req, res) {
            console.log('correct behaviour - running NEW URL');
            let submittedURL = req.url.slice(5); // getting rid of the /new/ in the beginning

            let isValidURL = false;
            let isURLregex = /https?:\/\/w*.+\..{2,3}/g;

            isValidURL = isURLregex.test(submittedURL);
            console.log('submitted URL is: ' + submittedURL);
            console.log('isValidURL? ' + isValidURL);

            if (isValidURL) {
              // add it to the database and give a response
              let collectionSize = urlCollection.count();
              console.log('ITEMS IN COLLECTION: ' + collectionSize);
              console.log(collectionSize);
              
              // resolve Promise: collectionSize
              collectionSize.then((result) => {
                console.log('Result');
                console.log(result);
                
                let newRecord = {
                "shortURL": result,
                "originalURL": submittedURL
                };

                urlCollection.insert(newRecord);
                res.json({ "isitok": "URL_IS_VALID"});
              });
              
              
            } else {
              res.json({ "error": "You've submitted an invalid URL."});
            }
        })

    app.route('/:lookupURL')
        .get(function(req, res) {
          console.log("LOOKUP /* RUNS: " + req.params.lookupURL);

          res.sendFile(process.cwd() + '/views/index.html');
        })

    // Respond not found to all the wrong routes
    app.use(function(req, res, next){
      res.status(404);
      res.type('txt').send('Not found');
    });

    // Error Middleware
    app.use(function(err, req, res, next) {
      if(err) {
        res.status(err.status || 500)
          .type('txt')
          .send(err.message || 'SERVER ERROR');
      }  
    })

    app.listen(process.env.PORT, function () {
      console.log('Node.js listening ...');
  });

  } else {
    console.log("Not connected. Error: " + err);
  }
  
});